# -*- coding: utf-8 -*-
"""NewsGroups Naive Bayes.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/13azCkq4RgB_jRp6ow-RN3joWcXsOB7lG
"""

!pip install scikit-learn
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.feature_extraction.text import TfidfTransformer
from sklearn.naive_bayes import MultinomialNB
from sklearn.pipeline import make_pipeline
from sklearn.metrics import accuracy_score
from sklearn.metrics import confusion_matrix
from sklearn.metrics import classification_report
from sklearn.datasets import fetch_20newsgroups
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split

categories = ['talk.religion.misc', 'soc.religion.christian', 'sci.space', 'comp.graphics']

newsgroups = fetch_20newsgroups(subset='all', categories=categories)
newsgroups

X = train.data
y = train.target

X_train, X_test, y_train, y_test = train_test_split(newsgroups.data, newsgroups.target, test_size=0.4, random_state=109)

print(train.data[5])

train.target

model = make_pipeline(CountVectorizer(), TfidfTransformer(), MultinomialNB())

# Train the model
model.fit(X_train, y_train)

# Predict the test data
y_pred = model.predict(X_test)

accuracy = accuracy_score(y_test, y_pred)
print(f"Accuracy: {accuracy * 100:.2f}%")

cm = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(6,4))
sns.heatmap(cm, annot=True, fmt='d', cmap='Blues', cbar=False, xticklabels=newsgroups.target_names, yticklabels=newsgroups.target_names)
plt.title('Naive Bayes Confusion Matrix (20 Newsgroups)')
plt.ylabel('Actual')
plt.xlabel('Predicted')
plt.show()

# Classification Report
print("Classification Report:")
print(classification_report(y_test, y_pred, target_names=newsgroups.target_names))

# Test the model with new custom data (unseen data)
new_data = [
    "The shuttle launch was delayed due to technical difficulties.",
    "I believe in Christianity, and this topic really resonates with my beliefs.",
    "This is about computer graphics rendering techniques.",
    "What is the purpose of life, and how do different religions view it?"
]

# Predict the categories for the new data
predicted_categories = model.predict(new_data)

# Print out the predicted categories along with their respective names
for doc, category in zip(new_data, predicted_categories):
    print(f"Text: {doc}\nPredicted Category: {newsgroups.target_names[category]}\n")