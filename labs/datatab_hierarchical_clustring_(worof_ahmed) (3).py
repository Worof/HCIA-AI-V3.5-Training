# -*- coding: utf-8 -*-
"""Datatab Hierarchical Clustring (worof ahmed).ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1NsRZEYU0Ejb-g_n36Yy6Z-_K5CQbddC4
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.cluster.hierarchy import dendrogram, linkage
from sklearn.cluster import AgglomerativeClustering
from sklearn.preprocessing import StandardScaler
from mpl_toolkits.mplot3d import Axes3D
import warnings
warnings.filterwarnings('ignore')

data = pd.read_csv('datatab2.csv')
data.index = data.index + 1
data.head()

final_data = data[['P1', 'P2', 'P3', 'P4', 'P5']]
final_data



scaler = StandardScaler()
scaled_data = scaler.fit_transform(final_data)

agg_cluster = AgglomerativeClustering(distance_threshold = 0, n_clusters=None, linkage='single')  # Using minimum linkage (single)
agg_cluster.fit(scaled_data)

linked = linkage(scaled_data, method='single')

custom_labels = ['P1', 'P2', 'P3', 'P4', 'P5']

# Plotting the Dendrogram with custom labels
plt.figure(figsize=(10, 7))
dendrogram(linked, labels=custom_labels, orientation='top', distance_sort='ascending', show_leaf_counts=True)

# Set x and y limits to start from 1
ax = plt.gca()
ax.set_xlim(left=1)
ax.set_ylim(bottom=1)

# Customize the labels and title
plt.title('Hierarchical Clustering Dendrogram with Feature Labels')
plt.xlabel('Features')
plt.ylabel('Distance')

# Show the plot
plt.show()

sns.pairplot(data, hue='Cluster', palette='viridis')
plt.show()

sns.set(style="whitegrid")

# Creating the pair plot
pair_plot = sns.pairplot(data, hue='Cluster', palette='viridis', diag_kind='kde', markers=["o", "s", "D"])

# Adding titles and customizing the plot
pair_plot.fig.suptitle('Comprehensive Pair Plot of Clusters', y=1.02)  # Title
pair_plot.add_legend(title="Cluster")  # Cluster legend

# Show the plot
plt.show()

feature_triplets = [('P1', 'P2', 'P3'), ('P1', 'P2', 'P4'), ('P1', 'P2', 'P5'),
                    ('P1', 'P3', 'P4'), ('P1', 'P3', 'P5'), ('P1', 'P4', 'P5'),
                    ('P2', 'P3', 'P4'), ('P2', 'P3', 'P5'), ('P2', 'P4', 'P5'),
                    ('P3', 'P4', 'P5')]

# Loop through the feature triplets and create a 3D scatter plot for each
for triplet in feature_triplets:
    fig = plt.figure(figsize=(10, 7))
    ax = fig.add_subplot(111, projection='3d')

    # Scatter plot with clusters in 3D space
    ax.scatter(data[triplet[0]], data[triplet[1]], data[triplet[2]],
               c=data['Cluster'], cmap='viridis', marker='o')

    # Setting labels and title for each plot
    ax.set_xlabel(triplet[0])
    ax.set_ylabel(triplet[1])
    ax.set_zlabel(triplet[2])
    ax.set_title(f'3D Scatter Plot for {triplet[0]}, {triplet[1]}, {triplet[2]} Clustering')

    # Show the plot
    plt.show()